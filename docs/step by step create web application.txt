1) Spring initializer (add Spring Web, Springboot DevTools, Spring Data JPA)

2) add this:
<dependency>
    <groupId>org.apache.tomcat.embed</groupId>
    <artifactId>tomcat-embed-jasper</artifactId>
</dependency>

When you add this dependency to your Spring Boot project, it includes support for JSPs when using an embedded Tomcat server. This is useful if you are using JSPs for your views in a Spring Boot application.

3) Add this in application.properties:
spring.mvc.view.prefix = /WEB-INF/jsp/
spring.mvc.view.suffix = .jsp

That is for configuration of jsp

4) Add also these two for another configuration in application.properties:

spring.devtools.restart.enabled = true

The first is for enable the auto restart using devtools.

OPTIONAL:
spring.jpa.show-sql = true //Show queries of schema.sql
spring.datasource.url = jdbc:h2:mem:pogi //Change the url in h2 database
spring.h2.console.enabled = true //Enable h2 database

5) Add these in pom.xml to fetch the data from the server to html:

<dependency>
    <groupId>org.glassfish.web</groupId>
    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
</dependency>

<dependency>
    <groupId>jakarta.servlet.jsp.jstl</groupId>
    <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
</dependency>


Also add this to a jsp file where you fetch the data. Example, after a client logged her/his account, then the homepage
.jsp where the homepage is show the data's of his/her account using that taglib

<%@ taglib prefix="c" uri="jakarta.tags.core" %>

6) Add this dependency if you want to use bootstrap:
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>bootstrap</artifactId>
	<version>5.1.3</version>
</dependency>

7) Add this dependency if you want to use jquery:
<dependency>
	<groupId>org.webjars</groupId>
	<artifactId>jquery</artifactId>
	<version>3.6.0</version>
</dependency>

8) Add this for creating a validation:
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-validation</artifactId>
</dependency>

9) Location of External css main/resources/static/css/index.css

Example of linking external css:
<link rel="stylesheet" href="${pageContext.request.contextPath}/css/home.css">

10) Location of external js main/resources/static/script.js

Example of linking external js:
<script src="${pageContext.request.contextPath}/js/script.js"></script>

11) Add this in jsp file for best practice
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
That is the form backing object. 2 way binding. First is from object to jsp and jsp to object.

Example in controller:
    @GetMapping("/to-do")
    public String to_do(ModelMap map){
        User user = new Users();
        map.addAttribute("user",user);
        return "index";
    }
    @PostMapping("/home")
    public String home(@ModelAttribute Users user,ModelMap map){
        map.addAttribute("user",user);
        return "home";
    }

Example in jsp:
    <form:form modelAttribute="user" action"/home" method="post">
        <form:input path="username" placeholder="Username"/>
        <form:input path="password" placeholder="Password"/>
    </form:form>

12) Add this in jsp file if you want to add icon in your web page:
<link rel="icon" href="<%= request.getContextPath() %>/images/checklist.ico" type="icon">

13) Connect postgre sql to springboot app.

1st - download dependency of postgre sql in mavenrepository website, just search 'postgre sql maven'.

2nd - create a database in pgAdmin and enter your postgre sql password and pick a username.

3rd - create a table for users of authentication,

      create table users(username varchar(25) not null primary key,password varchar(500) not null,enabled boolean not null);
      create table authorities (username varchar(25) not null,authority varchar(50) not null,constraint fk_authorities_users foreign key(username) references users(username));
      create unique index ix_auth_username on authorities (username,authority);

4th - setup application.properties,

Example:

spring.datasource.url = jdbc:postgresql://localhost:5432/database_name
spring.datasource.username = postgres
spring.datasource.password = your_postgre_password
spring.jpa.hibernate.ddl-auto = update

14) Add spring security.

1st - add spring security dependencies

a) <dependency>
   			<groupId>org.springframework.security</groupId>
   			<artifactId>spring-security-taglibs</artifactId>
   </dependency>
//This dependency is for getting csrf in jsp.
Syntax in jsp : <%@ taglib prefix="sec" uri="http://www.springframework.org/security/tags" %>

<sec:csrfInput /> //Add this every form.

b) <dependency>
   			<groupId>org.springframework.boot</groupId>
   			<artifactId>spring-boot-starter-security</artifactId>
   </dependency>

   <dependency>
        <groupId>org.springframework.security</groupId>
        <artifactId>spring-security-test</artifactId>
        <scope>test</scope>
   </dependency>
//Add these also.

2nd - Make a configuration class for Security to customize the formLogin, logout, authorizeHttpRequests, headers,
password hashing, and bean of JdbcUserDetailsManager for connecting to database.

Example code :

@EnableWebSecurity
@Configuration
@AllArgsConstructor
public class SecurityConfig {

    private final DataSource dataSource;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{

        return http.authorizeHttpRequests( (auth) -> auth
                                .requestMatchers( "/pea/home/**","/pea/about","/pea/contact","/pea/delete/**","/pea/edit/**")
                                .authenticated()
//                                .requestMatchers("/h2-console/**")
//                                .hasRole("ADMIN")
                                .anyRequest().permitAll()
                )
                .formLogin( (form) -> form
                        .loginPage("/pea/about")
                        .defaultSuccessUrl("/pea/about", true)
                        .failureUrl("/pea/login?error=true")
                        .permitAll()
                )
                .logout( (log) -> log
                        .logoutUrl("/pea/logout")
                        .logoutSuccessUrl("/pea")
                )
                .headers( (head) -> head
                        .frameOptions(HeadersConfigurer.FrameOptionsConfig::sameOrigin)
                )
//                .csrf(AbstractHttpConfigurer::disable)
                .build();
    }

    @Bean
    public PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }

    @Bean
    public JdbcUserDetailsManager jdbcUserDetailsManager(){
        return new JdbcUserDetailsManager(dataSource);
    }

}

14) For dynamically creating an account, inject JdbcUserDetailsManager and PasswordEncoder in createAccountService class. Here's the implementation.

Example code :

UserDetails createUser = User
                                .withUsername(user.getUsername())
                                .roles("USER")
                                .password(passwordEncoder.encode(password))
                                .build();

                        jdbcUserDetailsManager.createUser(createUser);

