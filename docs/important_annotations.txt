Spring Framework:
Definition: An open-source Java framework that provides comprehensive infrastructure support for developing Java applications.

Dependency Injection (DI):
Definition: A design pattern used to enable objects to receive dependencies from an external source rather than creating them internally.

Inversion of Control (IoC):
Definition: A principle in software engineering where the control flow of a program is inverted; instead of the programmer controlling the flow of execution, external frameworks manage it.

Spring Boot:
Definition: A project within the Spring ecosystem that simplifies the configuration and deployment of Spring applications by providing pre-configured defaults and convention-over-configuration setups.

@Component:
Definition: An annotation used to indicate that a class is a Spring-managed component, allowing Spring to automatically detect and instantiate it.

@Autowired:
Definition: An annotation used to automatically wire beans by type. It injects beans into properties, methods, or constructors in Spring-managed beans.

@Controller:
Definition: An annotation used in Spring MVC to mark a class as a controller that handles HTTP requests and returns appropriate responses.

@RestController:
Definition: A specialized version of the @Controller annotation used in Spring MVC, specifically designed for RESTful web services. It combines @Controller and @ResponseBody annotations.

@RequestMapping:
Definition: An annotation used to map web requests to specific handler methods in Spring MVC controllers.

@Service:
Definition: An annotation used to indicate that a class is a service in the business layer of an application. It is typically used to define business logic.

@Repository:
Definition: An annotation used to indicate that a class is a repository or a data access component, typically used for database operations. It translates database exceptions into Spring's unified DataAccessException hierarchy.

@Configuration:
Definition: An annotation used to indicate that a class provides configuration settings to the Spring Application Context.

@Bean:
Definition: An annotation used to indicate that a method produces a bean to be managed by the Spring container.

@Value:
Definition: An annotation used to inject values from property files, environment variables, or other Spring components into fields in a Spring-managed bean.

@Qualifier:
Definition: An annotation used to disambiguate Spring beans by specifying the bean to be injected when multiple beans of the same type are present.

@RequestParam:
Definition: This is an annotation used in Spring MVC to bind a web request parameter to a method parameter in a controller. This annotation can be used to handle query parameters, form data, or any other type of request parameter.

@Entity:
The @Entity annotation marks a Java class as a JPA entity, meaning it is a special type of Java object that represents data in a relational database. Each instance of this class corresponds to a row in the database table.

@Column(unique = true):
The unique attributes is set to true if you want the column is unique.

Annotations for Unique ID in Entity class:
@Id
@GeneratedValue(strategy = GenerationType.IDENTITY)

private Long id;
The @Id annotation is used to designate a field as the primary key of the entity. This annotation marks which attribute of the entity class uniquely identifies each instance of the entity in the database.

The @GeneratedValue annotation specifies how the primary key should be generated.

GenerationType.IDENTITY
This strategy indicates that the primary key is auto-generated by the database. It is commonly used with databases that support auto-incrementing columns, such as MySQL, PostgreSQL, and SQL Server.



All annotations for Create a one to manny and manny to one relations:

@OneToManny*
This annotation is used to define the one-to-many relationship. The mappedBy attribute indicates that the user field in the Todo class owns the relationship.

Example:
public class Users {
    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Todo> todos;
}

The "user" in that mappedBy is a reference or a variable of a ManyToOne class.

Example:
public class Todo {
    @Column(insertable = false, updatable = false)
    private Long user_ID;

    @ManyToOne
    @JoinColumn(name = "user_ID",  nullable = false, updatable = false)
    private Users user;

}
The @ManyToOne annotation in JPA is used to establish a many-to-one relationship between entities. It simplifies the representation of relational data and allows for efficient querying and manipulation of related entities in object-oriented applications.

The @JoinColumn annotation specifies that the user_id column in the todo table is the foreign key that references the Users table.


@Size(max = 50, message = "Username must be at most 50 characters long"): This annotation is used to specify the maximum length of the string that can be accepted. In this
case, the username field must be at most 50 characters long.
message = "Username must be at most 50 characters long": This is an optional attribute of the @Size annotation to provide a custom error message if the validation fails.

